{"version":3,"sources":["registerServiceWorker.js","components/items.jsx","components/input.jsx","components/list.jsx","components/App.jsx","index.js","logo.svg"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","Items","props","listItems","info","map","item","index","react_default","a","createElement","key","className","text","Input","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleInputTextChange","value","count","setState","length","alert","onOutput","_this2","onClick","handleOutput","placeholder","onChange","event","target","Component","List","id","chirpClass","newList","toConsumableArray","push","reload","handleClear","input","items","App","src","logo","alt","list","ReactDOM","render","components_App","document","getElementById","URL","process","origin","addEventListener","concat","fetch","response","status","headers","get","indexOf","ready","unregister","checkValidServiceWorker","registerServiceWorker","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.b53807a0.chunk.js","sourcesContent":["// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\n\nconst Items = (props) => {\n\n    let listItems = props.info.map((item, index) => {\n        return (\n            <div key={index} className=\"comment-container\">\n                <div className=\"row\">\n                    <div className=\"col-sm-12\">\n                        <div className=\"panel panel-white post\">\n                            <div className=\"text-container\">\n                                <div className=\"text-wrapper panel-shadow\">{item.text}</div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    });\n\n    return (\n        <div className=\"title h5\">{listItems}</div>\n    );\n}\n\nexport default Items;","import React, { Component } from 'react';\n\nclass Input extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            text: '',\n            count: 0\n        };\n\n    }\n\n    handleInputTextChange = (value) => {\n        this.state.count <= 100 ?\n            this.setState({ text: value, count: value.length }) :\n            alert('Chirp is too long!');\n    }\n\n    handleOutput() {\n        this.props.onOutput(this.state);\n\n        this.setState({\n            text: '',\n            count: 0\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"row\">\n                <div className=\"col-sm-12\">\n                    <div className=\"input-heading\">\n                        <div className=\"input-wrapper\">\n                            <div className=\"btn-text\">\n                                <button\n                                    className=\"textButton panel-shadow\"\n                                    onClick={() => { this.handleOutput() }}\n                                >Chirp</button>\n                            </div>\n                            <div className=\"input\">\n                                <input\n                                    className=\"textInput\"\n                                    placeholder=\"text\"\n                                    value={this.state.text}\n                                    onChange={(event) => this.handleInputTextChange(event.target.value)} />\n                            </div >\n                            <div className=\"counter\">\n                                {this.state.count}\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Input;\n\n","import React, { Component } from 'react';\nimport Items from './items';\nimport Input from './input';\n\nclass List extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            info: [\n                {\n                    id: 0,\n                    text: 'Hello World!',\n                },\n            ],\n            chirpClass: 'post2'\n        };\n    }\n\n    handleOutput(value) {\n        let newList = {\n            info: [\n                ...this.state.info\n            ]\n        };\n\n        // if (this.state.chirpClass === 'post') {\n        //     newList.chirpClass = 'post2';\n        // } else {\n        //     newList.chirpClass = 'post';\n        // }\n\n        let id = newList.info[newList.info.length - 1].id + 1;\n\n        newList.info.push({\n            id,\n            text: value.text,\n        });\n\n        if (value.text === '') {\n            alert('Missing Chirp Info!')\n        } else {\n            this.setState(newList);\n        }\n\n    }\n\n    handleClear() {\n        window.location.reload();\n    }\n\n\n    render() {\n        return (\n            <div className=\"Comment\">\n                <div className=\"container\">\n                    <div className=\"col-sm-12\">\n                        <div className={\"panel panel-white panel-input \" + this.state.chirpClass + \" panel-shadow\"}>\n                            <div className=\"post-heading\">\n                                <div className=\"pull-left meta\">\n                                    {/* <div className=\"chirpTitle\">Make Chirps Here</div> */}\n                                    <div className=\"btn-text-clear\">\n                                        <button className=\"clearButton panel-shadow\"\n                                            onClick={() => { this.handleClear() }}\n                                        >Clear</button>\n                                    </div>\n                                    <div>\n                                        <Input\n                                            onOutput={(value) => this.handleOutput(value)}\n                                        />\n                                        <Items info={this.state.info} />\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default List;","import React, { Component } from 'react';\nimport logo from '../logo.svg';\nimport List from './list';\nimport './index.css';\n\nclass App extends Component {\n    render() {\n        return (\n            <div className=\"App\">\n                <header className=\"App-header\">\n                    <img src={logo} className=\"App-logo\" alt=\"logo\" />\n                    <h1 className=\"App-title\">Chirper for chirping...</h1>\n                </header>\n                <List />\n            </div>\n        );\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport registerServiceWorker from './registerServiceWorker';\nimport App from './components/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nregisterServiceWorker();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}